            plt_gene <- ggplot(dat_in, aes(x=start, y={{statistic}})) + 
                                geom_point() + 
                                geom_smooth(color="black", span = 0.5) +
                                scale_x_continuous(breaks = seq(start_prom, end_prom, by = 10)) +
                                coord_cartesian(ylim = c(0,100), xlim = c(start_prom, end_prom)) + 
                                labs(title = paste0(key))+
                                theme(axis.ticks.x=element_blank(), 
                                axis.text.x=element_text(angle = 90, vjust = 0.5, hjust=1)) 
            if(add_tss == TRUE){
                plt_gene <- plt_gene + geom_vline(aes(xintercept = unique(dat_in$transcription_start_site)), colour="blue")
            }
    return(plt_gene)
    }
    plt <- plot_promoters(dat_in=dt_ov_ls_cp1, key="1700016C15Rik_ENSMUSG00000015962.5+", statistic = fraction_modified, cov_col=NULL)
    ggsave(plt, file=paste0("test_promoter2.pdf"), height = 12, width = 30)
    plot_promoters <- function(dat_in, key, statistic = NULL, add_tss=TRUE, cov_col=NULL){
            start_prom <- unique(dat_in$prom_start)
            end_prom <- unique(dat_in$prom_end)
            plt_gene <- ggplot(dat_in, aes(x=start, y={{statistic}})) + 
                                geom_point() + 
                                geom_smooth(color="black", span = 0.5) +
                                scale_x_continuous(breaks = seq(start_prom, end_prom, by = 50)) +
                                coord_cartesian(ylim = c(0,100), xlim = c(start_prom, end_prom)) + 
                                labs(title = paste0(key))+
                                theme(axis.ticks.x=element_blank(), 
                                axis.text.x=element_text(angle = 90, vjust = 0.5, hjust=1)) 
            if(add_tss == TRUE){
                plt_gene <- plt_gene + geom_vline(aes(xintercept = unique(dat_in$transcription_start_site)), colour="blue")
            }
    return(plt_gene)
    }
    plt <- plot_promoters(dat_in=dt_ov_ls_cp1, key="1700016C15Rik_ENSMUSG00000015962.5+", statistic = fraction_modified, cov_col=NULL)
    ggsave(plt, file=paste0("test_promoter2.pdf"), height = 12, width = 30)
dt_ov_ls_cp1
dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, prom_strand)]
names(dt_ov_ls_cp1)
dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "C", prom_strand, key)]
dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "C", score = 0,prom_strand, key)]
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0,prom_strand, key)] %>% as.data.frame()
rng <- Null_ov %>% as_iranges()
library(plyranges)
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0,prom_strand, key)] %>% as.data.frame()
rng <- Null_ov %>% as_iranges()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("chrom", "start", "end", "strand"))
Null_ov
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("chrom", "start", "end", "strand"))
Null_ov
Null_ov %>% as_iranges()
rng <- Null_ov %>% as_granges()
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
rng <- Null_ov %>% as_granges()
rng
dt_ov_ls_cp1
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov,fraction_modified)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
Null_ov %>% as_granges()
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov=0,fraction_modified=0.0)] %>% head(1) %>% as.data.frame()
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov=0,fraction_modified=0.0)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
rng <- Null_ov %>% as_granges()
Null_ov
dput(rng)
bin_1bp <- disjoin(rng)
bin_1bp
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov=0,fraction_modified=0.0)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
rng <- Null_ov %>% as_granges()
bin_1bp <- disjoin(rng)
bin_1bp
rng
bin_1bp
bin_1bp <- tile(rng, width=1)
bin_1bp
bsgenome
library(tidyverse)
#load library
library(tidyverse)
library(data.table)
library(matrixStats)
library(optparse)
library(dtplyr)
library(cowplot)
library(parallel)
#set
# Detect the number of cores
num_cores <- detectCores()
option_list <- list(
   make_option(("--input_file"), type = "character", default="/work/greenbaum/users/ahunos/apps/methyl_longRead_wf/results/promoters/D-A-3/data/D-A-3.chr1.filtered_Consensus.overlaps.bed"),
    make_option(("--nReads"), type="integer", default=5,help ="threshold for number minimum numvber reads per site"),
    # make_option(("--stats2Use"), type="character", default="median",help ="use mean or median aggreagate prob per site"),
    make_option(("--methyl_percent"), type="numeric", default=70,help ="threshold for site to be called methylated, used in combination with nReads"),
    make_option(("--methyl_metrics_promoter_data"), type="character", default="methyl_metrics_promoter_data.tsv",help ="methylation activity per gene promoter data in .txt")
    # make_option(("--overlaps_rds"), type="character", default="overlaps.rds",help ="data for overlaps"),
  #  make_option("--plots_pdf", type="character", default="plots.pdf", help="plot name"),
  #  make_option("--plots_rds", type="character", default="plot_object.rds", help="name of plot file")
   )
opt <- parse_args(OptionParser(option_list = option_list))
message("done reading in bed files as data.table")
dt_ov <- fread(opt$input_file)
# 
#c("chrom", "start", "end", "mod_base", "score", "strand", "start2", "end2", "color", "Nvalid_cov", "fraction_modified", "Nmod", "Ncanonical", "Nother_mod", "Ndelete", "Nfail", "Ndiff", "Nnocall")
setnames(dt_ov, c("V1",  "V2",  "V3",  "V4",  "V5",  "V6",  "V7",  "V8",  "V9",  "V10", "V11", "V12","V13", "V14" ,"V15", "V16", "V17", "V18", 
"V19", "V20", "V21", "V22", "V23", 
"V24", "V25", "V26", "V27", "V28", "V29"
), 
c("chrom", "start", "end", "mod_base", "score", "strand", "start2", "end2", "color", "Nvalid_cov", "fraction_modified", "Nmod", "Ncanonical", "Nother_mod", "Ndelete", "Nfail", "Ndiff", "Nnocall",
"prom_chrom", "prom_start", "prom_end", "prom_strand", "key",
"ensgene.version", "symbol", "biotype","transcription_start_site", "numGCs", "numCGs"))
dt_ov_ls <- split(dt_ov, dt_ov$key) #split by keys
# 
#remove nameless data tables
keep = (!names(dt_ov_ls) == "")
dt_ov_ls <- dt_ov_ls[keep]
dt_ov_ls_cp <- copy(dt_ov_ls)
dt_ov_ls_cp1 <- dt_ov_ls_cp[[1]]
#filter low numb reads
# dt_ov_ls_ <- lapply(dt_ov_ls, function(x) x[(Nvalid_cov >= opt$nReads),])
dt_ov_ls_cp1 <- dt_ov_ls_cp1[order(start)]
library(plyranges)
Null_ov <- dt_ov_ls_cp1[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov=0,fraction_modified=0.0)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
rng <- Null_ov %>% as_granges()
rng
gr=rng
    require(BSgenome.Mmusculus.UCSC.mm10)
    genome <- BSgenome.Mmusculus.UCSC.mm10
    seqGr <- getSeq(genome, gr)
seqGr
seqGr_numCpGs <- Biostrings::vcountPattern("CG", seqGr) #get cpg sites
seqGr_numCpGs
cpg_locations <- which(letterFrequency(substring(seqGr, start=1, end=length(seqGr)-1), "CG") == 1)
BiocManager::install("Biostrings")
library(Biostrings)
cpg_locations <- which(letterFrequency(substring(seqGr, start=1, end=length(seqGr)-1), "CG") == 1)
cpg_locations <- which(letterFrequency(substring(seqGr, start=1, end=length(seqGr)-1), "CG") == 1)
which(matchPattern("CG", seqGr))
Biostrings::vmatchPattern("CG", seqGr)
dt_ov_ls_cp1
dt_ov_ls[1:2]
lapply(dt_ov_ls[1:2], function(x) {
Null_ov <- x[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov=0,fraction_modified=0.0)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
rng <- Null_ov %>% as_granges()
return(rng)
})
test_grList <- lapply(dt_ov_ls[1:2], function(x) {
Null_ov <- x[, .(prom_chrom, prom_start,  prom_end, mod_base = "*", score = 0, prom_strand, key, Nvalid_cov=0,fraction_modified=0.0)] %>% head(1) %>% as.data.frame()
setnames(Null_ov, c("prom_chrom", "prom_start", "prom_end", "prom_strand"), c("seqnames", "start", "end", "strand"))
rng <- Null_ov %>% as_granges()
return(rng)
})
laply(test_grList, function(x) {getSeq(genome, gr)})
laplly(test_grList, function(x) {getSeq(genome, gr)})
lapply(test_grList, function(x) {getSeq(genome, gr)})
    seqGrList <- lapply(test_grList, function(x) {
        seqGr <- getSeq(genome, gr)
        cpg_locations <- Biostrings::vmatchPattern("CG", seqGr)
        retrun(cpg_locations)
        })
    seqGrList <- lapply(test_grList, function(x) {
        seqGr <- getSeq(genome, gr)
        cpg_locations <- Biostrings::vmatchPattern("CG", seqGr)
        return(cpg_locations)
        })
seqGrList
getMotif_sites <- function(bsgenome,grList=NULL, context="CG"){
    require(Biostrings)
    require(BSgenome.Mmusculus.UCSC.mm10)
    genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(test_grList, function(x) {
        seqGr <- getSeq(genome, grList) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
}
out_cps <- getMotif_sites(bsgenome,grList=test_grList, context="CG")
test_grList
getMotif_sites <- function(bsgenome=NULL,grList=NULL, context="CG"){
    require(Biostrings)
    require(BSgenome.Mmusculus.UCSC.mm10)
    genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(test_grList, function(x) {
        seqGr <- getSeq(genome, grList) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
}
out_cps <- getMotif_sites(bsgenome,grList=test_grList, context="CG")
getMotif_sites <- function(bsgenome=NULL,grList=NULL, context="CG"){
    require(Biostrings)
    require(BSgenome.Mmusculus.UCSC.mm10)
    genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, grList) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
}
out_cps <- getMotif_sites(bsgenome,grList=test_grList, context="CG")
getMotif_sites <- function(bsgenome=NULL,grList=NULL, context="CG"){
    require(Biostrings)
    require(BSgenome.Mmusculus.UCSC.mm10)
    genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, grList) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
out_cps <- getMotif_sites(bsgenome,grList=test_grList, context="CG")
test_grList
getMotif_sites(bsgenome,grList=test_grList, context="CG")
getMotif_sites(grList=test_grList, context="CG")
test_grList
getMotif_sites <- function(bsgenome=NULL,grList=NULL, context="CG"){
    require(Biostrings)
    require(BSgenome.Mmusculus.UCSC.mm10)
    genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
out_cps <- getMotif_sites(grList=test_grList, context="CG")
out_cps
out_cps[[1]]
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
genome <- switch(ref_genome,
mm10 = require(BSgenome.Mmusculus.UCSC.mm10)
hg38 = require(BSgenome.Hsapiens.UCSC.hg38)
)
   print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
genome <- switch(ref_genome,
mm10 = require(BSgenome.Mmusculus.UCSC.mm10),
hg38 = require(BSgenome.Hsapiens.UCSC.hg38)
)
   print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
#test 
getMotif_sites(grList=test_grList, context="CG")
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
   print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
getMotif_sites(ref_genome=mm10, grList=test_grList, context="CG")
getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
   #print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
dt_ov_ls_cp[1:2]
dt_ov_ls_cp1_2 <- dt_ov_ls_cp[1:2]
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
   #print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        return(motif_locations)
        })
        return(seqGrList)
}
out_cps <- getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
# out_cps[[1]]
out_cps
overlaps <- findOverlaps(query = dt_ov_ls_cp1_2, subject = out_cps)
dt_ov_ls_cp1_2
lapply(dt_ov_ls_cp1_2, function(x)
makeGRangesFromDataFrame(x, keep.extra.columns = TRUE, starts.in.df.are.0based = TRUE)
)
overlaps <- findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
dt_ov_ls_cp1_2_GRlist <- lapply(dt_ov_ls_cp1_2, function(x)
makeGRangesFromDataFrame(x, keep.extra.columns = TRUE, starts.in.df.are.0based = TRUE)
)
overlaps <- findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
out_cps
class(out_cps)
out_cps
grangeslist(out_cps)
GRangesList(out_cps)
GRangesList(out_cps)
as.granges(out_cps[[1]])
out_cps
dput(out_cps[[1]])
structure(out_cps[[1]])
dput(out_cps[[1]])
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
   #print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
        # Calculate the starts based on the ends and the width
ends <- motif_locations@ends[[1]]
width <- motif_locations@width0
starts <- ends - width + 1
# Convert to GRanges
gr <- GRanges(seqnames = rep("seq1", length(ends)), # Assuming a dummy sequence name "seq1"
              ranges = IRanges(start = starts, end = ends))
        return(gr)
        }
)
        return(seqGrList)
}
out_cps <- getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
out_cps
Biostrings::vmatchPattern
showMethods(vmatchPattern)
getSeq
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
   #print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
print(str(seqGr))
#         # Calculate the starts based on the ends and the width
# ends <- motif_locations@ends[[1]]
# width <- motif_locations@width0
# starts <- ends - width + 1
# # Convert to GRanges
# gr <- GRanges(seqnames = rep("seq1", length(ends)), # Assuming a dummy sequence name "seq1"
#               ranges = IRanges(start = starts, end = ends))
        # return(gr)
        })
        return(seqGrList)
}
getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
   #print(genome) # require(Biostrings)
    # require(BSgenome.Mmusculus.UCSC.mm10)
    # genome <- BSgenome.Mmusculus.UCSC.mm10
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        print(seqnames(x))
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
print(str(seqGr))
#         # Calculate the starts based on the ends and the width
# ends <- motif_locations@ends[[1]]
# width <- motif_locations@width0
# starts <- ends - width + 1
# # Convert to GRanges
# gr <- GRanges(seqnames = rep("seq1", length(ends)), # Assuming a dummy sequence name "seq1"
#               ranges = IRanges(start = starts, end = ends))
        # return(gr)
        })
        return(seqGrList)
}
getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        # print(seqnames(x))
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
# print(str(seqGr))
        # Calculate the starts based on the ends and the width
ends <- motif_locations@ends[[1]]
width <- motif_locations@width0
starts <- ends - width + 1
# Convert to GRanges
gr <- GRanges(seqnames = seqnames(x), # Assuming a dummy sequence name "seq1"
              ranges = IRanges(start = starts, end = ends))
        return(gr)
        })
        return(seqGrList)
}
getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
out_cps <- getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
 findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
out_cps
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
dt_ov_ls_cp1_2_GRlist <- lapply(dt_ov_ls_cp1_2, function(x)
makeGRangesFromDataFrame(x, keep.extra.columns = TRUE, starts.in.df.are.0based = TRUE)
)
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps[[1]])
findOverlaps(query = dt_ov_ls_cp1_2_GRlist[[1]], subject = out_cps[[1]])
class(out_cps)
getMotif_sites <- function(ref_genome=NULL,grList=NULL, context="CG"){
  # Load the required genome
  genome <- switch(ref_genome,
                   mm10 = BSgenome.Mmusculus.UCSC.mm10,
                   hg38 = BSgenome.Hsapiens.UCSC.hg38,
                   stop("Invalid ref_genome specified")
  )
#get seq of the granges in question 
    seqGrList <- lapply(grList, function(x) {
        # print(seqnames(x))
        seqGr <- getSeq(genome, x) #get seqs from ref genome
        motif_locations <- Biostrings::vmatchPattern(context, seqGr) #get cpg sites
# print(str(seqGr))
        # Calculate the starts based on the ends and the width
ends <- motif_locations@ends[[1]]
width <- motif_locations@width0
starts <- ends - width + 1
# Convert to GRanges
gr <- GRanges(seqnames = seqnames(x), # Assuming a dummy sequence name "seq1"
              ranges = IRanges(start = starts, end = ends))
        return(gr)
        })
        return(GRangesList(seqGrList))
}
out_cps <- getMotif_sites(ref_genome="mm10", grList=test_grList, context="CG")
out_cps
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
out_cps
class(out_cps)
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
class(dt_ov_ls_cp1_2_GRlist)
dt_ov_ls_cp1_2_GRlist <- GRangesList(dt_ov_ls_cp1_2_GRlist)
class(dt_ov_ls_cp1_2_GRlist)
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
dt_ov_ls_cp1_2_GRlist
out_cps
findOverlaps(query = dt_ov_ls_cp1_2_GRlist, subject = out_cps)
findOverlaps(query = dt_ov_ls_cp1_2_GRlist[[1]], subject = out_cps[[1]])
